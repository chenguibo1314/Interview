1、mybatis的缓存机制


答：
1）mybatis提供了查询缓存来缓存数据，分为一级缓存和二级缓存；


2）一级缓存是sqlsession级别的，只要用的是同一个sqlsession，查询会被缓存，执行其他操作的时候缓存会被清空，默认开启一级缓存；


3）二级缓存是mapper级别的，作用域是mapper同一个namespace文件，不同的sqlsession访问同一个查询的时候第二个sqlsession会使用第一次的缓存，mybatis默认没有开启二级缓存，需要配置

2、sql为什么要使用<![CDATA[ ... ]]>这对标签包含起来了?
答：
当sql中含有大于号>和小于号<的情况，会被解析成为xml标签

3、mybatis是如何进行分页的？分页的原理是什么？
答：
1、mybatis使用RowBounds对象进行分页，主要针对ResultSet结果集执行内存分页，
而非物理分页
2、分页的原理主要是mybatis提供了插件接口，实现自定义插件，在插件的拦截方法内
重写sql，执行分页效果

4、mybatis的好处是什么？
答：
1、把sql从Java源程序中独立出来
2、封装了底层JDBC API调用的细节，自动将结果集转成javaBean对象
3、简化Java数据库编程

5、mybatis是否支持延迟加载？
答：
mybatis仅支持assciation关联和Collection关联集合对象延迟加载
原理：使用CGLIB创建目标代理对象，当调用目标方法时，进入拦截器，
拦截器invoke()方法发现获取关联对象为空时就会单独去查关联对象的数据，
这就是延迟加载的基本原理

6、mybatis有哪些Executor执行器？它们之间的区别是什么？
答：
1、SimpleExecutor:每执行一次update或select，就开启一个statement对象，用完立即关闭
2、ReuseExecutor:执行update或select，以sql作为key查找statement对象，存在就使用，
不存在就创建，使用完后不关闭statement对象，而是存在Map<String,statement>中，供
下次使用

7、mybatis工作原理?
答：
 
mybatis通过配置文件创建sqlsessionFactory，sqlsessionFactory根据配置文件，配置文件来源于两个方面:一个是xml，一个是Java中的注解，获取sqlSession。SQLSession包含了执行sql语句的所有方法，可以通过SQLSession直接运行映射的sql语句，完成对数据的增删改查和事物的提交工作，用完之后关闭SQLSession。

8、mybatis解决的问题

？
1.使用数据库连接池管理链接，避免了频繁创建了、关闭链接，浪费资源，影响性能的问题。

2.用xml管理sql语句，让Java代码和sql语句分离，使得代码更易维护。

3.解决了sql语句参数不定的问题。xml中可以通过where条件决定sql语句的条件参数。
mybatis将Java对象映射到sql语句，通过statement的parameterType定义输入参数的类型。

4.mybatis自动将结果集封装成Java对象， 通过statement的resultType定义输出的类型。
避免了因sql变化，对结果集处理麻烦的问题。

9、mybatis的工作流程？
答：
1、xml文件中定义了mapperStatement的id值
2、当调用一个方法时接口全类名就定位到了配置文件中的mapper Statement对象
3、mybatis会使用jdk动态代理为为接口创建Proxy代理对象,代理对象会拦截接口方法
转而执行mapperStatement所代表的sql，并返回结果集

10、什么情况下用注解绑定,什么情况下用xml绑定？
当Sql语句比较简单时候,用注解绑定,当SQL语句比较复杂时候,用xml绑定,一般用xml绑定的比较多













